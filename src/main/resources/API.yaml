# Author: Toby Zhu
# API Doc for frontend and backend communication and joint debugging

swagger: "2.0"
info:
  description: "This is the API documentation v1.0.0 of the project Vandy Course Planner."
  version: "1.0.0"
  title: "Vandy Course Planner"
  contact:
    email: "xiaoliang.zhu@vanderbilt.edu"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/vandy"
tags:
  - name: "Courses"
    description: "Operations about course infomation"
  - name: "Prereqs"
    description: "Operations about course prerequisite and hierarchy"
  - name: "Savings"
    description: "Operations about users' saved versions"
schemes:
  #- "https"
  - "http"
paths:
  /courses/:
    get:
      tags:
        - "Courses"
      summary: "Get all course infomation given level"
      operationId: "getAllCourse"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "level"
          type: "integer"
          in: "query"
          enum: [1,2,3,4]
          description: "Course level for searching; empty to search for all"
      responses:
        "200":
          description: "Successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CourseDetail"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "405":
          description: "Invalid input"
  /courses/classify:
    get:
      tags:
        - "Courses"
      summary: "Check the major requirement category of a course"
      operationId: "classifyCourse"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "subject"
          type: "string"
          in: "query"
          required: true
          description: "Course subject"
        - name: "number"
          type: "integer"
          in: "query"
          required: true
          description: "Course number"
      responses:
        "200":
          description: "Successful"
          schema:
            type: "string"
            example: "project"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "405":
          description: "Invalid input"
  /courses/satisfy:
    post:
      tags:
        - "Courses"
      summary: "Check if a major requirement category is satisfied given selected courses"
      operationId: "isSatisfied"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Array of selected courses"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
      responses:
        "200":
          description: "Successful"
          schema:
            type: "object"
            properties:
              software:
                type: "boolean"
              hardware:
                type: "boolean"
              depth:
                type: "boolean"
              seminar:
                type: "boolean"
              project:
                type: "boolean"
              foundation:
                type: "boolean"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "405":
          description: "Invalid input"
  /prereqs/:
    post:
      tags:
        - "Prereqs"
      summary: "Get all course status given selected courses"
      operationId: "getAllCourseStatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Array of selected courses"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
      responses:
        "200":
          description: "Successful, returning status of each course"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CourseStatus"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "405":
          description: "Invalid input"
  /savings/:
    get:
      tags:
        - "Savings"
      summary: "Get all saved courses of a user"
      operationId: "getAllSavedCourse"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          type: "string"
          in: "query"
          required: true
          format: "email"
          description: "User email"
      responses:
        "200":
          description: "Successful, returning status of each course"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CourseStatus"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "405":
          description: "Invalid input"
  /savings/add:
    post:
      tags:
        - "Savings"
      summary: "Add a selected course for a user"
      operationId: "addSelectedCourse"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Array of selected courses"
          required: true
          schema:
            $ref: "#/definitions/CourseSaved"
      responses:
        "200":
          description: "Successful"
          schema:
            type: "string"
            example: "Successfully deleted"
        "404":
          description: "Not Found"
        "500":
          description: "Failure"
          schema:
            type: "string"
            example: "Fail to delete course"
  /savings/delete:
    post:
      tags:
        - "Savings"
      summary: "Delete a selected course for a user"
      description: "Remove the course record from the table Saving"
      operationId: "deleteSelectedCourse"
      parameters:
        - in: "body"
          name: "body"
          description: "Array of selected courses"
          required: true
          schema:
            $ref: "#/definitions/CourseSaved"
      responses:
        "200":
          description: "Successful"
          schema:
            type: "string"
            example: "Successfully saved"
        "400":
          description: "Cannot delete"
        "404":
          description: "Not Found"
        "500":
          description: "Failure"
          schema:
            type: "string"
            example: "Fail to save course"
definitions:
  Course:
    type: "object"
    required:
      - "Course_no"
      - "Subject"
    properties:
      Course_no:
        type: "integer"
        format: "int32"
      Subject:
        type: "string"
  Professor:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      over_rate:
        type: "number"
      diff_rate:
        type: "number"
      tid:
        type: "string"
  CourseDetail:
    type: "object"
    required:
      - "number"
      - "subject"
      - "name"
    properties:
      number:
        type: "integer"
        format: "int32"
      subject:
        type: "string"
      name:
        type: "string"
      # The list of prerequisites. The index 0 list is the "can't take" courses
      prereqs:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
          example: ["CS 1101", "CS 2201"]
      # The raw list of prerequsites; for testing purpose
      prerequisites:
        type: "array"
        items:
          $ref: "#/definitions/Course"
      frequency:
        type: "string"
      professors:
        type: "array"
        items:
          $ref: "#/definitions/Professor"
  CourseStatus:
    type: "object"
    required:
      - "number"
      - "subject"
    properties:
      number:
        type: "integer"
        format: "int32"
      subject:
        type: "string"
      status:
        type: "string"
        enum: ["selected", "able", "notable"]
  CourseSaved:
    type: "object"
    required:
      - "email"
      - "number"
    properties:
      email:
        type: "string"
      number:
        type: "integer"
        format: "int32"
      subject:
        type: "string"
